{
    "identify_text_files_with_word": {
        "code": "import os\n\ndef identify_text_files_with_word(directory: str, search_word: str) -> list:\n    \"\"\"\n    Identify all text files in the specified directory. Open each text file and inspect its\n    contents to determine if the specified word is present. Create and return a list of these\n    text files' names if they contain the word.\n\n    Args:\n        directory (str): The directory path containing the text files to be inspected.\n        search_word (str): The word to search for within the text files.\n\n    Returns:\n        list: A list of text file names that contain the specified word.\n    \"\"\"\n    text_files_with_word = []\n\n    # Iterate over all the files in the specified directory\n    for filename in os.listdir(directory):\n        if filename.endswith(\".txt\"):\n            file_path = os.path.join(directory, filename)\n            with open(file_path, 'r', encoding='utf-8') as file:\n                content = file.read()\n                # Check if the search word is in the file content\n                if search_word in content:\n                    text_files_with_word.append(filename)\n\n    return text_files_with_word",
        "description": "Identify all text files in the specified directory"
    },
    "format_datetime_objects": {
        "code": "from datetime import datetime\n\n\ndef format_datetime_objects(start_datetime: datetime, end_datetime: datetime) -> tuple:\n    \"\"\"\n    Convert the given start and end datetime objects into the desired string formats\n    using Python's datetime formatting features.\n\n    Args:\n        start_datetime (datetime): The starting datetime object.\n        end_datetime (datetime): The ending datetime object.\n\n    Returns:\n        tuple: A tuple containing the formatted start and end datetime strings.\n               Format example: ('2024\u5e7412\u670811\u65e5 18:30:00', '2024\u5e7412\u670811\u65e5 20:30:00')\n    \"\"\"\n    # Define the format for converting the datetime object to the desired string format\n    desired_format = \"%Y\u5e74%m\u6708%d\u65e5 %H:%M:%S\"\n\n    formatted_start = start_datetime.strftime(desired_format)\n\n    formatted_end = end_datetime.strftime(desired_format)\n\n    return formatted_start, formatted_end\n",
        "description": "Convert the given start and end datetime objects into the desired string formats"
    },
    "parse_string_to_datetime_objects": {
        "code": "from dateutil import parser\n\n\ndef parse_string_to_datetime_objects(input_str: str) -> tuple:\n    \"\"\"\n    Parse the input string to extract datetime objects for the start time and end time.\n\n    Args:\n        input_str (str): A string that contains start and end times in various formats\n                         (e.g., 'Dec 11 WED 6:30 pm - 8:30 pm' or 'November 28, 2024 4:00-5:30pm').\n\n    Returns:\n        tuple: A tuple containing two datetime objects, the first representing the start time,\n               and the second representing the end time.\n    \"\"\"\n\n    # Normalize the input string to handle different formats\n    input_str = input_str.replace(\" - \", \" to \")\n\n    # Split the input string into start and end parts\n    if \"to\" in input_str:\n        start_str, end_str = input_str.split(\" to \")\n    else:\n        raise ValueError(\n            \"Input string must contain a 'to' separator for start and end times.\"\n        )\n\n    # Parse start and end time strings using dateutil.parser\n    start_datetime = parser.parse(start_str.strip())\n    end_datetime = parser.parse(end_str.strip())\n\n    # Return the datetime objects\n    return start_datetime, end_datetime\n",
        "description": "Parse the input string to extract datetime objects for the start time and end time"
    }
}