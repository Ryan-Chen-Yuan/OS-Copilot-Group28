{
    "create_cheat_sheet": {
        "code": "from oscopilot.tool_repository.basic_tools.base_action import BaseAction\nfrom PyPDF2 import PdfReader\nfrom docx import Document\nfrom docx.shared import Pt, Inches\nimport os\nimport re\nfrom tqdm import tqdm\nimport logging\nclass create_cheat_sheet(BaseAction):\n    def __init__(self):\n        self._description = \"Convert multiple PDF files into a condensed Word document cheat sheet.\"\n\n    def clean_text(self, text):\n        \"\"\"Clean unnecessary characters and content from text\"\"\"\n        # Remove special characters and extra whitespace\n        text = re.sub(r'[\\n\\r\\t]', ' ', text)\n        text = re.sub(r'\\s+', ' ', text)\n        \n        # Remove common unnecessary content\n        patterns_to_remove = [\n            r'\\d+/\\d+',  # Page numbers\n            r'\u00a9.*?All Rights Reserved',  # Copyright information\n            r'www\\..*?\\.com',  # Website addresses\n            r'http\\S+',  # URLs\n            r'Figure\\s*\\d+',  # Figure labels\n            r'Table\\s*\\d+',  # Table labels\n        ]\n        \n        for pattern in patterns_to_remove:\n            text = re.sub(pattern, '', text)\n        \n        return text.strip()\n\n    def __call__(self, working_directory=None, pdf_folder='Slides', output_docx='output.docx', *args, **kwargs):\n        \"\"\"\n        Convert multiple PDF files into a condensed Word document cheat sheet.\n\n        Args:\n            pdf_folder (str): Path to the folder containing PDF files. Default is 'Slides'.\n            output_docx (str): Path for the output Word document. Default is 'output.docx'.\n\n        Returns:\n            None\n        \"\"\"\n        # Create new Word document\n        doc = Document()\n        \n        # Set margins (0.3 inches)\n        sections = doc.sections\n        for section in sections:\n            section.top_margin = Inches(0.3)\n            section.bottom_margin = Inches(0.3)\n            section.left_margin = Inches(0.3)\n            section.right_margin = Inches(0.3)\n        \n        # Initial font size and line spacing\n        font_size = 6.5\n        line_spacing = 0.8\n        \n        while True:\n            doc = Document()  # Recreate document\n            \n            # Reset margins\n            for section in doc.sections:\n                section.top_margin = Inches(0.3)\n                section.bottom_margin = Inches(0.3)\n                section.left_margin = Inches(0.3)\n                section.right_margin = Inches(0.3)\n            \n            # Process all PDF files\n            for filename in tqdm(os.listdir(pdf_folder)):\n                if filename.lower().endswith('.pdf'):\n                    pdf_path = os.path.join(pdf_folder, filename)\n                    pdf_reader = PdfReader(pdf_path)\n                    \n                    text = \"\"\n                    for page in tqdm(pdf_reader.pages, desc=\"Reading pages\", leave=False):\n                        text += page.extract_text()\n                    \n                    # Only clean the text, not the summary\n                    text = self.clean_text(text)\n                    \n                    paragraph = doc.add_paragraph(text)\n                    paragraph.paragraph_format.line_spacing = line_spacing\n                    paragraph.paragraph_format.space_after = Pt(0)\n                    paragraph.paragraph_format.space_before = Pt(0)\n                    for run in paragraph.runs:\n                        run.font.size = Pt(font_size)\n            \n            # Temporary save the document for checking the page count\n            temp_path = 'temp.docx'\n            doc.save(temp_path)\n            temp_doc = Document(temp_path)\n            \n            # Check the page count\n            if len(temp_doc.sections) <= 2:\n                doc.save(output_docx)\n                logging.info(\"File at: \" & output_docx)\n                os.remove(temp_path)\n                break\n            \n            # If more than 2 pages, decrease the font size or line spacing\n            if font_size > 4:  # Minimum font size limit\n                font_size -= 0.5\n            elif line_spacing > 0.5:  # Minimum line spacing limit\n                line_spacing -= 0.1\n            else:\n                print(\"Warning: Unable to compress content to less than 2 pages!\")\n                doc.save(output_docx)\n                os.remove(temp_path)\n                break\n\n# Example usage\n# create_cheat_sheet(pdf_folder='Slides', output_docx='output.docx')\n",
        "description": "# Remove special characters and extra whitespace"
    },
    "retrieve_files_from_slides": {
        "code": "def retrieve_files_from_slides(slides_folder='/Users/francis/Documents/Courses/7607 NLP/Project/OS-Copilot-main/working_dir/Slides'):\n    \"\"\"\n    Retrieve the list of files from the specified 'Slides' folder.\n\n    Args:\n        slides_folder (str): Full path to the Slides folder. \n            Defaults to the standard location in the working directory.\n\n    Returns:\n        list: A list of file names present in the Slides folder.\n    \"\"\"\n    import os\n\n    # Check if the folder exists\n    if not os.path.exists(slides_folder):\n        raise FileNotFoundError(f\"The Slides folder does not exist at {slides_folder}\")\n\n    # Get list of all files in the folder\n    files = [f for f in os.listdir(slides_folder) if os.path.isfile(os.path.join(slides_folder, f))]\n\n    return files",
        "description": "Retrieve the list of files from the specified 'Slides' folder"
    },
    "get_slides_files": {
        "code": "def get_slides_files(slides_folder='/Users/francis/Documents/Courses/7607 NLP/Project/OS-Copilot-main/working_dir/Slides'):\n    \"\"\"\n    Retrieve the list of files from the specified 'Slides' folder.\n    Args:\n        slides_folder (str): Full path to the Slides folder. \n            Defaults to the standard location in the working directory.\n    Returns:\n        list: A list of file names present in the Slides folder.\n    \"\"\"\n    import os\n    # Check if the folder exists\n    if not os.path.exists(slides_folder):\n        raise FileNotFoundError(f\"The Slides folder does not exist at {slides_folder}\")\n    # Get list of all files in the folder\n    files = [f for f in os.listdir(slides_folder) if os.path.isfile(os.path.join(slides_folder, f))]\n    return files",
        "description": "Retrieve the list of files from the specified 'Slides' folder"
    },
    "generate_cheat_sheet": {
        "code": "def generate_cheat_sheet(pdf_folder, output_docx):\n    \"\"\"\n    Convert multiple PDF files into a condensed Word document cheat sheet by removing special characters\n    and extra whitespace from the content of the files.\n    Args:\n        pdf_folder (str): Path to the folder containing PDF files.\n        output_docx (str): Path for the output Word document.\n    Returns:\n        str: Path to the generated Word document indicating the task has been completed.\n    \"\"\"\n    from PyPDF2 import PdfReader\n    from docx import Document\n    from docx.shared import Pt, Inches\n    import os\n    import re\n    from tqdm import tqdm\n    import logging\n    # Create new Word document\n    doc = Document()\n    \n    # Set margins (0.3 inches)\n    sections = doc.sections\n    for section in sections:\n        section.top_margin = Inches(0.3)\n        section.bottom_margin = Inches(0.3)\n        section.left_margin = Inches(0.3)\n        section.right_margin = Inches(0.3)\n    \n    # Initial font size and line spacing\n    font_size = 6.5\n    line_spacing = 0.8\n    \n    # Function to clean text\n    def clean_text(text):\n        text = re.sub(r'[\\n\\r\\t]', ' ', text)\n        text = re.sub(r'\\s+', ' ', text)\n        patterns_to_remove = [\n            r'\\d+/\\d+',  # Page numbers\n            r'\\u00a9.*?All Rights Reserved',  # Copyright information\n            r'www\\..*?\\.com',  # Website addresses\n            r'http\\S+',  # URLs\n            r'Figure\\s*\\d+',  # Figure labels\n            r'Table\\s*\\d+'  # Table labels\n        ]\n        for pattern in patterns_to_remove:\n            text = re.sub(pattern, '', text)\n        return text.strip()\n    # Process all PDF files\n    for filename in tqdm(os.listdir(pdf_folder)):\n        if filename.lower().endswith('.pdf'):\n            pdf_path = os.path.join(pdf_folder, filename)\n            pdf_reader = PdfReader(pdf_path)\n            \n            text = \"\"\n            for page in tqdm(pdf_reader.pages, desc=\"Reading pages\", leave=False):\n                text += page.extract_text() if page.extract_text() else \"\"\n            \n            # Clean the text\n            text = clean_text(text)\n            \n            paragraph = doc.add_paragraph(text)\n            paragraph.paragraph_format.line_spacing = line_spacing\n            paragraph.paragraph_format.space_after = Pt(0)\n            paragraph.paragraph_format.space_before = Pt(0)\n            for run in paragraph.runs:\n                run.font.size = Pt(font_size)\n    # Save the document\n    doc.save(output_docx)\n    logging.info(\"File at: \" & output_docx)\n    return os.path.abspath(output_docx)",
        "description": "Convert multiple PDF files into a condensed Word document cheat sheet by removing special characters"
    },
    "get_slide_files": {
        "code": "def get_slide_files(slides_folder='/Users/francis/Documents/Courses/7607 NLP/Project/OS-Copilot-main/working_dir/Slides'):\n    \"\"\"\n    Retrieve the list of files from the specified 'Slides' folder.\n    Args:\n        slides_folder (str): Full path to the Slides folder. \n            Defaults to the standard location in the working directory.\n    Returns:\n        list: A list of file names present in the Slides folder.\n    \"\"\"\n    import os\n    # Check if the folder exists\n    if not os.path.exists(slides_folder):\n        raise FileNotFoundError(f\"The Slides folder does not exist at {slides_folder}\")\n    # Get list of all files in the folder\n    files = [f for f in os.listdir(slides_folder) if os.path.isfile(os.path.join(slides_folder, f))]\n    return files",
        "description": "Retrieve the list of files from the specified 'Slides' folder"
    },
    "create_condensed_cheat_sheet": {
        "code": "def create_condensed_cheat_sheet(pdf_folder_path, output_docx_path):\n    \"\"\"\n    Convert PDF files into a condensed Word document cheat sheet by removing special characters \n    and extra whitespace.\n    \n    Args:\n        pdf_folder_path (str): Full path to the folder containing PDF files to process\n        output_docx_path (str): Full path where the output Word document should be saved\n        \n    Returns:\n        str: Absolute path to the generated Word document\n    \"\"\"\n    from PyPDF2 import PdfReader\n    from docx import Document\n    from docx.shared import Pt, Inches\n    import os\n    import re\n    from tqdm import tqdm\n    import logging\n    # Create new Word document\n    doc = Document()\n    \n    # Set margins (0.3 inches)\n    sections = doc.sections\n    for section in sections:\n        section.top_margin = Inches(0.3)\n        section.bottom_margin = Inches(0.3)\n        section.left_margin = Inches(0.3)\n        section.right_margin = Inches(0.3)\n    \n    # Initial font size and line spacing\n    font_size = 6.5\n    line_spacing = 0.8\n    \n    # Function to clean text\n    def clean_text(text):\n        text = re.sub(r'[\\n\\r\\t]', ' ', text)\n        text = re.sub(r'\\s+', ' ', text)\n        patterns_to_remove = [\n            r'\\d+/\\d+',  # Page numbers\n            r'\\u00a9.*?All Rights Reserved',  # Copyright information\n            r'www\\..*?\\.com',  # Website addresses\n            r'http\\S+',  # URLs\n            r'Figure\\s*\\d+',  # Figure labels\n            r'Table\\s*\\d+'  # Table labels\n        ]\n        for pattern in patterns_to_remove:\n            text = re.sub(pattern, '', text)\n        return text.strip()\n    \n    # Process all PDF files\n    for filename in tqdm(os.listdir(pdf_folder_path)):\n        if filename.lower().endswith('.pdf'):\n            pdf_path = os.path.join(pdf_folder_path, filename)\n            pdf_reader = PdfReader(pdf_path)\n            \n            text = \"\"\n            for page in tqdm(pdf_reader.pages, desc=\"Reading pages\", leave=False):\n                text += page.extract_text() if page.extract_text() else \"\"\n            \n            # Clean the text\n            text = clean_text(text)\n            \n            paragraph = doc.add_paragraph(text)\n            paragraph.paragraph_format.line_spacing = line_spacing\n            paragraph.paragraph_format.space_after = Pt(0)\n            paragraph.paragraph_format.space_before = Pt(0)\n            for run in paragraph.runs:\n                run.font.size = Pt(font_size)\n    \n    # Save the document\n    doc.save(output_docx_path)\n    logging.info(\"File at: \" & output_docx_path)\n    return os.path.abspath(output_docx_path)",
        "description": "Convert PDF files into a condensed Word document cheat sheet by removing special characters "
    },
    "generate_cheatsheet": {
        "code": "def generate_cheatsheet(slides_folder, output_docx):\n    \"\"\"\n    Convert PDF files from the slides folder into a condensed Word document cheat sheet by removing special characters\n    and extra whitespace.\n    \n    Args:\n        slides_folder (str): Full path to the folder containing PDF slides\n        output_docx (str): Full path where the output Word document should be saved\n        \n    Returns:\n        str: Absolute path to the generated Word document\n    \"\"\"\n    from PyPDF2 import PdfReader\n    from docx import Document\n    from docx.shared import Pt, Inches\n    import os\n    import re\n    from tqdm import tqdm\n    \n    # Create new Word document\n    doc = Document()\n    \n    # Set margins (0.3 inches)\n    sections = doc.sections\n    for section in sections:\n        section.top_margin = Inches(0.3)\n        section.bottom_margin = Inches(0.3)\n        section.left_margin = Inches(0.3)\n        section.right_margin = Inches(0.3)\n    \n    # Initial font size and line spacing\n    font_size = 6.5\n    line_spacing = 0.8\n    \n    # Function to clean text\n    def clean_text(text):\n        text = re.sub(r'[\\n\\t]', ' ', text)\n        text = re.sub(r'\\s+', ' ', text)\n        patterns_to_remove = [\n            r'\\d+/\\d+',  # Page numbers\n            r'\\u00a9.*?All Rights Reserved',  # Copyright information\n            r'www\\..*?\\.com',  # Website addresses\n            r'http\\S+',  # URLs\n            r'Figure\\s*\\d+',  # Figure labels\n            r'Table\\s*\\d+'  # Table labels\n        ]\n        for pattern in patterns_to_remove:\n            text = re.sub(pattern, '', text)\n        return text.strip()\n    \n    # Process all PDF files\n    for filename in tqdm(os.listdir(slides_folder)):\n        if filename.lower().endswith('.pdf'):\n            pdf_path = os.path.join(slides_folder, filename)\n            pdf_reader = PdfReader(pdf_path)\n            \n            text = \"\"\n            for page in tqdm(pdf_reader.pages, desc=\"Reading pages\", leave=False):\n                text += page.extract_text() if page.extract_text() else \"\"\n            \n            # Clean the text\n            text = clean_text(text)\n            \n            paragraph = doc.add_paragraph(text)\n            paragraph.paragraph_format.line_spacing = line_spacing\n            paragraph.paragraph_format.space_after = Pt(0)\n            paragraph.paragraph_format.space_before = Pt(0)\n            for run in paragraph.runs:\n                run.font.size = Pt(font_size)\n    \n    # Save the document\n    doc.save(output_docx)\n    return os.path.abspath(output_docx)",
        "description": "Convert PDF files from the slides folder into a condensed Word document cheat sheet by removing special characters"
    },
    "retrieve_slide_files": {
        "code": "def retrieve_slide_files(slides_folder='/Users/francis/Documents/Courses/7607 NLP/Project/OS-Copilot-main/working_dir/Slides'):\n    \"\"\"\n    Retrieve the list of PDF files from the specified 'Slides' folder.\n    Args:\n        slides_folder (str): Full path to the Slides folder. \n            Defaults to the standard location in the working directory.\n    Returns:\n        list: A list of PDF file names present in the Slides folder.\n    \"\"\"\n    import os\n    # Check if the folder exists\n    if not os.path.exists(slides_folder):\n        raise FileNotFoundError(f\"The Slides folder does not exist at {slides_folder}\")\n    # Get list of all PDF files in the folder\n    pdf_files = [f for f in os.listdir(slides_folder) if f.lower().endswith('.pdf') and os.path.isfile(os.path.join(slides_folder, f))]\n    return pdf_files",
        "description": "Retrieve the list of PDF files from the specified 'Slides' folder"
    },
    "get_pdf_files": {
        "code": "def get_pdf_files(slides_folder='/Users/francis/Documents/Courses/7607 NLP/Project/OS-Copilot-main/working_dir/Slides'):\n    \"\"\"\n    Retrieve the list of PDF files from the specified 'Slides' folder.\n\n    Args:\n        slides_folder (str): Full path to the Slides folder. \n            Defaults to the standard location in the working directory.\n\n    Returns:\n        list: A list of PDF file names present in the Slides folder.\n    \"\"\"\n    import os\n    # Check if the folder exists\n    if not os.path.exists(slides_folder):\n        raise FileNotFoundError(f\"The Slides folder does not exist at {slides_folder}\")\n    \n    # Get list of all PDF files in the folder\n    pdf_files = [f for f in os.listdir(slides_folder) if f.lower().endswith('.pdf') and os.path.isfile(os.path.join(slides_folder, f))]\n    \n    return pdf_files",
        "description": "Retrieve the list of PDF files from the specified 'Slides' folder"
    },
    "create_cheatsheet": {
        "code": "def create_cheatsheet(slides_folder, output_docx):\n    \"\"\"\n    Convert PDF files from the slides folder into a condensed Word document cheat sheet by removing special characters\n    and extra whitespace.\n    \n    Args:\n        slides_folder (str): Full path to the folder containing PDF slides\n        output_docx (str): Full path where the output Word document should be saved\n        \n    Returns:\n        str: Absolute path to the generated Word document\n    \"\"\"\n    from PyPDF2 import PdfReader\n    from docx import Document\n    from docx.shared import Pt, Inches\n    import os\n    import re\n    from tqdm import tqdm\n    import logging\n    # Create new Word document\n    doc = Document()\n    \n    # Set margins (0.3 inches)\n    sections = doc.sections\n    for section in sections:\n        section.top_margin = Inches(0.3)\n        section.bottom_margin = Inches(0.3)\n        section.left_margin = Inches(0.3)\n        section.right_margin = Inches(0.3)\n    \n    # Initial font size and line spacing\n    font_size = 6.5\n    line_spacing = 0.8\n    \n    # Function to clean text\n    def clean_text(text):\n        text = re.sub(r'[\\n\\\\\\t]', ' ', text)\n        text = re.sub(r'\\s+', ' ', text)\n        patterns_to_remove = [\n            r'\\d+/\\d+',  # Page numbers\n            r'\\u00a9.*?All Rights Reserved',  # Copyright information\n            r'www\\..*?\\.com',  # Website addresses\n            r'http\\S+',  # URLs\n            r'Figure\\s*\\d+',  # Figure labels\n            r'Table\\s*\\d+'  # Table labels\n        ]\n        for pattern in patterns_to_remove:\n            text = re.sub(pattern, '', text)\n        return text.strip()\n    \n    # Process all PDF files\n    for filename in tqdm(os.listdir(slides_folder)):\n        if filename.lower().endswith('.pdf'):\n            pdf_path = os.path.join(slides_folder, filename)\n            pdf_reader = PdfReader(pdf_path)\n            \n            text = \"\"\n            for page in tqdm(pdf_reader.pages, desc=\"Reading pages\", leave=False):\n                text += page.extract_text() if page.extract_text() else \"\"\n            \n            # Clean the text\n            text = clean_text(text)\n            \n            paragraph = doc.add_paragraph(text)\n            paragraph.paragraph_format.line_spacing = line_spacing\n            paragraph.paragraph_format.space_after = Pt(0)\n            paragraph.paragraph_format.space_before = Pt(0)\n            for run in paragraph.runs:\n                run.font.size = Pt(font_size)\n    \n    # Save the document\n    doc.save(output_docx)\n    logging.info(\"File at: \" & output_docx)\n    return os.path.abspath(output_docx)",
        "description": "Convert PDF files from the slides folder into a condensed Word document cheat sheet by removing special characters"
    },
    "retrieve_pdf_files": {
        "code": "def retrieve_pdf_files(slides_folder='/Users/pp/OS-Copilot/working_dir/Slides'):\n    \"\"\"\n    Retrieve the list of PDF files from the specified 'Slides' folder.\n\n    Args:\n        slides_folder (str): Full path to the Slides folder. \n            Defaults to the standard location in the working directory.\n\n    Returns:\n        list: A list of PDF file names present in the Slides folder.\n    \"\"\"\n    import os\n    # Check if the folder exists\n    if not os.path.exists(slides_folder):\n        raise FileNotFoundError(f\"The Slides folder does not exist at {slides_folder}\")\n    \n    # Get list of all PDF files in the folder\n    pdf_files = [f for f in os.listdir(slides_folder) if f.lower().endswith('.pdf') and os.path.isfile(os.path.join(slides_folder, f))]\n    \n    return pdf_files",
        "description": "Retrieve the list of PDF files from the specified 'Slides' folder"
    },
    "save_cheat_sheet": {
        "code": "def save_cheat_sheet(cheat_sheet_path):\n    \"\"\"\n    Save the generated cheat sheet to the specified path.\n    \n    Args:\n        cheat_sheet_path (str): The absolute path of the cheat sheet file to be saved\n        \n    Returns:\n        str: A message confirming the cheat sheet has been saved along with its path\n    \"\"\"\n    import os\n    import shutil\n    \n    # Get the current working directory\n    working_dir = os.getcwd()\n    \n    # Get the filename from the path\n    filename = os.path.basename(cheat_sheet_path)\n    \n    # Create the destination path\n    dest_path = os.path.join(working_dir, filename)\n    \n    # Copy the file to working directory\n    shutil.copy2(cheat_sheet_path, dest_path)\n    \n    return f\"Cheat sheet saved successfully at: {os.path.abspath(dest_path)}\"",
        "description": "Save the generated cheat sheet to the specified path"
    }
}